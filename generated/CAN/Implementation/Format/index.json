{
    "hidden": "false",
    "title": "Format des trames",
    "description": "Documentation sur le format de trames",
    "order": "1",
    "uri": "CAN/Implementation/Format",
    "page_content": "<p>On utilise le protocole <code>2.0b</code> est utilis\u00e9 pour avoir une trame applicative sur 29 bits (au lieu de 11) et jusqu'\u00e0 8 octets de donn\u00e9es :</p>\n<table tabindex='0'>\n<thead>\n<tr>\n<th style=\"text-align: left;\">Champ</th>\n<th style=\"text-align: center;\">EMIT_ADDR</th>\n<th style=\"text-align: center;\">RECV_ADDR</th>\n<th style=\"text-align: center;\">FCT_CODE</th>\n<th style=\"text-align: center;\">MSG_ID</th>\n<th style=\"text-align: center;\">IS_RESP</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align: left;\">Nombre de bits</td>\n<td style=\"text-align: center;\">8 (0-255)</td>\n<td style=\"text-align: center;\">8 (0-255)</td>\n<td style=\"text-align: center;\">8 (0-255)</td>\n<td style=\"text-align: center;\">4 (0-15)</td>\n<td style=\"text-align: center;\">1 (0-1)</td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">Description</td>\n<td style=\"text-align: center;\">Adresse de l'emetteur</td>\n<td style=\"text-align: center;\">Adresseur du receveur</td>\n<td style=\"text-align: center;\">Fonction \u00e0 r\u00e9aliser</td>\n<td style=\"text-align: center;\">ID de la trame applicative</td>\n<td style=\"text-align: center;\">R\u00e9ponse ou non</td>\n</tr>\n</tbody>\n</table>\n<p>Les controlleurs CAN (MCP2515 ou celui int\u00e9gr\u00e9 aux L432KC) ne supportent que les protocoles CAN 2.0 et CAN 2.0b avec 8 octets de donn\u00e9es.\nSeuls les messages valides activent les interruptions, les autres sont ignor\u00e9s.</p>\n<p>Tous les masques, d\u00e9calages et autres constantes sont d\u00e9finies dans <code>define_can.h</code>.\nLe filtrage des adresses est fait par la librairie et utilise ces constantes :</p>\n<ul>\n<li>Dans <code>CAN::readBuffer</code> c\u00f4t\u00e9 Raspberry :</li>\n</ul>\n<div class=\"codehilite\"><pre tabindex='0'><span></span><code><span class=\"n\">frame</span><span class=\"p\">.</span><span class=\"n\">receiverAddress</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">.</span><span class=\"n\">can_id</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"n\">CAN_MASK_RECEIVER_ADDR</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">CAN_OFFSET_RECEIVER_ADDR</span><span class=\"p\">;</span>\n\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">address</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"n\">frame</span><span class=\"p\">.</span><span class=\"n\">receiverAddress</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">frame</span><span class=\"p\">.</span><span class=\"n\">receiverAddress</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"n\">CAN_ADDR_BROADCAST</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">-1</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n<ul>\n<li>Dans <code>CAN_RECEIVE</code> c\u00f4t\u00e9 STM32 :</li>\n</ul>\n<div class=\"codehilite\"><pre tabindex='0'><span></span><code><span class=\"n\">rep</span><span class=\"o\">-&gt;</span><span class=\"n\">receiverAddress</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">RxHeader</span><span class=\"p\">.</span><span class=\"n\">ExtId</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"n\">CAN_MASK_RECEIVER_ADDR</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">CAN_OFFSET_RECEIVER_ADDR</span><span class=\"p\">;</span>\n\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">rep</span><span class=\"o\">-&gt;</span><span class=\"n\">receiverAddress</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"n\">NODE_ADDRESS</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">rep</span><span class=\"o\">-&gt;</span><span class=\"n\">receiverAddress</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"n\">CAN_ADDR_BROADCAST</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">HAL_ERROR</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n<p>Pour mieux comprendre les masques et d\u00e9calages, voici un sch\u00e9ma : </p>\n<div class=\"codehilite\"><pre tabindex='0'><span></span><code><span class=\"c1\">// Initialement, on a une s\u00e9quence de 29 bits</span>\n<span class=\"mb\">0b11001111000110001000001100001</span>\n\n<span class=\"c1\">// Si on veut r\u00e9cup\u00e9rer l&#39;adresse de l&#39;\u00e9metteur, on applique un masque</span>\n<span class=\"w\">   </span><span class=\"mb\">0b11001111000110001000001100001</span><span class=\"w\"> </span>\n<span class=\"o\">&amp;</span><span class=\"w\">  </span><span class=\"mb\">0b11111111000000000000000000000</span>\n<span class=\"o\">----------------------------------</span>\n<span class=\"o\">=</span><span class=\"w\">  </span><span class=\"mb\">0b11001111000000000000000000000</span>\n\n<span class=\"c1\">// Ensuite on veut se d\u00e9barasser des 21 bits de poids faible</span>\n<span class=\"w\">   </span><span class=\"mb\">0b11001111000000000000000000000</span>\n<span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"mi\">21</span>\n<span class=\"o\">----------------------------------</span>\n<span class=\"o\">=</span><span class=\"w\">  </span><span class=\"mb\">0b00000000000000000000011001111</span>\n\n<span class=\"c1\">// Enfin, on stocke le r\u00e9sultat dans une variable</span>\n<span class=\"c1\">// qui ne prend que 8 bits, ce qui revient \u00e0</span>\n<span class=\"kt\">uint8_t</span><span class=\"w\"> </span><span class=\"n\">address</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mb\">0b11001111</span><span class=\"p\">;</span>\n</code></pre></div>"
}