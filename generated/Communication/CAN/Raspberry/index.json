{
    "hidden": "false",
    "title": "Librairie Raspberry",
    "description": "Utiliser la librairie CAN pour Raspberry",
    "order": "2",
    "uri": "Communication/CAN/Raspberry",
    "page_content": "<p>Pour installer la librairie CAN sur Linux, il faut :</p>\n<ul>\n<li>Cloner le d\u00e9p\u00f4t GitHub : <code>git clone https://github.com/RobotechNancy/Communication.git</code></li>\n<li>Se placer dans le dossier clon\u00e9 : <code>cd Communication</code></li>\n<li>Utiliser le script d'installation : <code>sudo ./lib_manager install Logs CAN</code></li>\n</ul>\n<blockquote>\n<p class=\"quote quote-TIP\">Pour mettre \u00e0 jour la librairie, <code>git pull</code> puis <code>sudo ./lib_manager install CAN</code></p>\n</blockquote>\n<h3>Configuration du bus</h3>\n<p>Avant d'utiliser la librairie CAN, il est important de cr\u00e9er l'interface CAN :</p>\n<ul>\n<li>Bus CAN virtuel :</li>\n</ul>\n<div class=\"codehilite\"><pre tabindex='0'><span></span><code><span class=\"c1\"># Ajouter le module vcan</span>\nsudo<span class=\"w\"> </span>modprobe<span class=\"w\"> </span>vcan\n<span class=\"c1\"># Cr\u00e9er l&#39;interface vcan0</span>\nsudo<span class=\"w\"> </span>ip<span class=\"w\"> </span>link<span class=\"w\"> </span>add<span class=\"w\"> </span>dev<span class=\"w\"> </span>vcan0<span class=\"w\"> </span><span class=\"nb\">type</span><span class=\"w\"> </span>vcan\n</code></pre></div>\n\n<ul>\n<li>Bus CAN r\u00e9el :</li>\n</ul>\n<div class=\"codehilite\"><pre tabindex='0'><span></span><code><span class=\"c1\"># Ajouter le module mcp2515</span>\n<span class=\"nb\">echo</span><span class=\"w\"> </span><span class=\"s2\">&quot;dtoverlay=mcp2515-can0,oscillator=8000000,interrupt=25,spimaxfrequency=2000000&quot;</span><span class=\"w\"> </span>&gt;<span class=\"w\"> </span>/boot/config.txt\n<span class=\"c1\"># Red\u00e9marrer la Raspberry</span>\nsudo<span class=\"w\"> </span>reboot\n</code></pre></div>\n\n<h3>Initialisation</h3>\n<p>Pour initialiser un module CAN, il faut cr\u00e9er une instance de la classe <code>CAN</code> et lui attribuer une adresse :</p>\n<div class=\"codehilite\"><pre tabindex='0'><span></span><code><span class=\"n\">CAN</span><span class=\"w\"> </span><span class=\"n\">can</span><span class=\"p\">;</span>\n\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">can</span><span class=\"p\">.</span><span class=\"n\">init</span><span class=\"p\">(</span><span class=\"n\">CAN_ADDR_RASPBERRY</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"c1\">// Une erreur s&#39;est produite lors de l&#39;initialisation</span>\n<span class=\"w\">    </span><span class=\"c1\">// Toutes les erreurs sont d\u00e9finies dans define_can.h</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n<p>Important, il faut d\u00e9marrer l'interface CAN avant de pouvoir l'utiliser :</p>\n<div class=\"codehilite\"><pre tabindex='0'><span></span><code><span class=\"c1\"># D\u00e9marrer l&#39;interface vcan0</span>\nsudo<span class=\"w\"> </span>ip<span class=\"w\"> </span>link<span class=\"w\"> </span><span class=\"nb\">set</span><span class=\"w\"> </span>up<span class=\"w\"> </span>vcan0\n\n<span class=\"c1\"># D\u00e9marrer l&#39;interface can0</span>\nsudo<span class=\"w\"> </span>ip<span class=\"w\"> </span>link<span class=\"w\"> </span><span class=\"nb\">set</span><span class=\"w\"> </span>can0<span class=\"w\"> </span>up<span class=\"w\"> </span><span class=\"nb\">type</span><span class=\"w\"> </span>can<span class=\"w\"> </span>bitrate<span class=\"w\"> </span>&lt;BITRATE&gt;<span class=\"w\"> </span>loopback<span class=\"w\"> </span>off\n</code></pre></div>\n\n<h3>Envoyer des donn\u00e9es</h3>\n<p>Pour envoyer une donn\u00e9es, il suffit d'utiliser <code>CAN::send</code> :</p>\n<div class=\"codehilite\"><pre tabindex='0'><span></span><code><span class=\"n\">can</span><span class=\"p\">.</span><span class=\"n\">send</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"n\">CAN_ADDR_ODOMETRIE</span><span class=\"p\">,</span><span class=\"w\">     </span><span class=\"c1\">// Receveur</span>\n<span class=\"w\">    </span><span class=\"n\">FCT_ACCUSER_RECEPTION</span><span class=\"p\">,</span><span class=\"w\">  </span><span class=\"c1\">// Fonction</span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"mh\">0x01</span><span class=\"p\">},</span><span class=\"w\">                 </span><span class=\"c1\">// Donn\u00e9es</span>\n<span class=\"w\">    </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\">                      </span><span class=\"c1\">// ID de la demande (arbitraire)</span>\n<span class=\"w\">    </span><span class=\"nb\">false</span><span class=\"w\">                   </span><span class=\"c1\">// Demande =&gt; false</span>\n<span class=\"p\">);</span>\n</code></pre></div>\n\n<h3>Recevoir des donn\u00e9es</h3>\n<p>Il existe deux mani\u00e8res de recevoir des donn\u00e9es :</p>\n<ul>\n<li>De mani\u00e8re synchrone (bloque le programme), avec <code>CAN::send</code> :</li>\n</ul>\n<div class=\"codehilite\"><pre tabindex='0'><span></span><code><span class=\"n\">can_result_t</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">can2</span><span class=\"p\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"n\">CAN_ADDR_RASPBERRY</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">FCT_ACCUSER_RECEPTION</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"mh\">0x01</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">false</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">);</span>\n\n<span class=\"k\">switch</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">.</span><span class=\"n\">status</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"no\">CAN_OK</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"c1\">// Trame accessible dans res.frame</span>\n<span class=\"w\">        </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">&quot;CAN_OK&quot;</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">break</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"no\">CAN_ERROR</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">&quot;CAN_ERROR&quot;</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">break</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"no\">CAN_TIMEOUT</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">&quot;CAN_TIMEOUT&quot;</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"k\">break</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n<ul>\n<li>De mani\u00e8re asynchrone (ne bloque pas le programme), avec <code>CAN::bind</code> :</li>\n</ul>\n<div class=\"codehilite\"><pre tabindex='0'><span></span><code><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"nf\">handleAcknowledge</span><span class=\"p\">(</span><span class=\"n\">CAN</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">can</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">can_frame_t</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">frame</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">frame</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mh\">0x01</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">&quot;ACK&quot;</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">else</span>\n<span class=\"w\">        </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">&quot;NACK&quot;</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">can</span><span class=\"p\">.</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"n\">FCT_ACCUSER_RECEPTION</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">handleAcknowledge</span><span class=\"p\">);</span>\n</code></pre></div>\n\n<p>Dans les deux cas, il est n\u00e9cessaire d'appeler <code>CAN::startListening</code> pour d\u00e9marrer l'\u00e9coute :</p>\n<div class=\"codehilite\"><pre tabindex='0'><span></span><code><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;robotech/xbee.h&gt;</span>\n\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">CAN</span><span class=\"w\"> </span><span class=\"n\">can</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">can</span><span class=\"p\">.</span><span class=\"n\">init</span><span class=\"p\">(</span><span class=\"n\">CAN_ADDR_RASPBERRY</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Utilisation d&#39;un lambda au lieu d&#39;une fonction classique</span>\n<span class=\"w\">    </span><span class=\"n\">can</span><span class=\"p\">.</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"n\">FCT_ACCUSER_RECEPTION</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[](</span><span class=\"n\">CAN</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">can</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">can_frame_t</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">frame</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">&quot;Code fonction ACCUSER_RECEPTION re\u00e7u&quot;</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"n\">can</span><span class=\"p\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"n\">frame</span><span class=\"p\">.</span><span class=\"n\">senderAddress</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">FCT_ACCUSER_RECEPTION</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">frame</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">});</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// On bloque le thread principal pour laisser le </span>\n<span class=\"w\">    </span><span class=\"c1\">// temps au programme de recevoir des meesages</span>\n<span class=\"w\">    </span><span class=\"n\">can</span><span class=\"p\">.</span><span class=\"n\">startListening</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">this_thread</span><span class=\"o\">::</span><span class=\"n\">sleep_for</span><span class=\"p\">(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">chrono</span><span class=\"o\">::</span><span class=\"n\">seconds</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">));</span>\n\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>"
}